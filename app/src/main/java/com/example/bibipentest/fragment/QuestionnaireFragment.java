package com.example.bibipentest.fragment;

import static com.example.bibipentest.fragment.PenBindFragment.showBluetoothBindingDialog;

import android.Manifest;
import android.annotation.SuppressLint;
import android.bluetooth.BluetoothGatt;
import android.content.ComponentName;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.IntentFilter;
import android.content.ServiceConnection;
import android.content.pm.PackageManager;
import android.os.Bundle;

import androidx.annotation.NonNull;
import androidx.appcompat.app.AlertDialog;
import androidx.core.app.ActivityCompat;
import androidx.core.content.ContextCompat;
import androidx.fragment.app.Fragment;

import android.os.Handler;
import android.os.IBinder;
import android.os.Looper;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.EditText;
import android.widget.TextView;
import android.widget.Toast;

import com.bbb.bpen.binder.BiBiBinder;
import com.bbb.bpen.command.BiBiCommand;
import com.bbb.bpen.model.Pen;
import com.bbb.bpen.model.PointData;
import com.bbb.bpen.service.BluetoothLEService;
import com.example.bibipentest.MyApp;
import com.example.bibipentest.R;
import com.example.bibipentest.util.DrawUtil;
import com.example.bibipentest.broadcast.EventTriggerReceiver;
import com.example.bibipentest.data.PointManager;
import com.example.bibipentest.util.VolleyUtils;
import com.example.bibipentest.view.DrawingView;

import java.util.List;

import kotlinx.coroutines.internal.LockFreeLinkedListKt;
import com.example.bibipentest.fragment.PenBindFragment;

// 答题界面
public class QuestionnaireFragment extends Fragment {
    private static final int REQUEST_BLUETOOTH_PERMISSION = 310;
    private static String TAG = "QustionnaireFragment";
    public Boolean isBound;
    private BluetoothLEService service = null;
    private EventTriggerReceiver eventTriggerReceiver;

    private VolleyUtils volleyUtils;

    DrawingView dw;


    private DrawingView dw;

    @SuppressLint("MissingInflatedId")
    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container,
                             Bundle savedInstanceState) {
        // Inflate the layout for this fragment
        View view = inflater.inflate(R.layout.fragment_questionnaire, container, false);
        dw = view.findViewById(R.id.drawingView);

        // 需创建Service才能进行连接
        Intent intent = new Intent(getActivity(), BluetoothLEService.class);
        getActivity().bindService(intent, coon, Context.BIND_AUTO_CREATE);

        checkBluetoothPermission();
        showCustomMaterialDialog();

        // 广播事件接收者用于触发点击事件
        eventTriggerReceiver = new EventTriggerReceiver(dw);
        IntentFilter intentFilter = new IntentFilter("CheckForEventTrigger");
        getContext().registerReceiver(eventTriggerReceiver, intentFilter);

        // 蓝牙连接进程
        BLEConnectHandler = new Handler(Looper.getMainLooper());

        hideSystemUI();
        return view;
    }


    // 这里是进入答题页面时，展示的一个弹窗，需要绑定笔的信息
    // 需要选择笔连接，目前只显示两支笔，后端最多给两个笔。如果更多的话默认只展示最近的两个，毕竟大部分情况下都是一个
    private void showCustomMaterialDialog() {
        // Inflate the custom layout for the dialog
        LayoutInflater inflater = LayoutInflater.from(getContext());
        View dialogView = inflater.inflate(R.layout.fragment_pen_dialog, null);

        // Find the EditText and Button views from the custom layout
        EditText editText1 = dialogView.findViewById(R.id.editText1);
        EditText editText2 = dialogView.findViewById(R.id.editText2);
        Button button1 = dialogView.findViewById(R.id.button1);
        Button button2 = dialogView.findViewById(R.id.button2);
        Button btn_bind_new_pen = dialogView.findViewById(R.id.btn_bind_new_pen);
        Button btn_close_dialog = dialogView.findViewById(R.id.btn_close_dialog);
        TextView textHint = dialogView.findViewById(R.id.textHint);

        AlertDialog.Builder builder = new AlertDialog.Builder(getContext());
        builder.setView(dialogView);

        AlertDialog alertDialog = builder.create();
        alertDialog.getWindow().setBackgroundDrawableResource(R.drawable.dialog_rounded_corners);
        alertDialog.setCanceledOnTouchOutside(false);

        // 全局显示，并取消系统的底部状态栏
        int uiOptions = View.SYSTEM_UI_FLAG_FULLSCREEN
                | View.SYSTEM_UI_FLAG_HIDE_NAVIGATION
                | View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY;
        alertDialog.getWindow().getDecorView().setSystemUiVisibility(uiOptions);

        // 连接第一支笔，如果MAC信息有误则不能连接
        button1.setOnClickListener(new View.OnClickListener() {
            @SuppressLint("SetTextI18n")
            @Override
            public void onClick(View v) {
                String text = String.valueOf(editText1.getText());
                if (text.length() == 16) {
                    String macAddress = text.substring(text.length() - 12);
                    // 连接蓝牙笔
                    boolean isConnecting = BiBiCommand.connect(getContext(), DrawUtil.macConvert(macAddress),true);

                    // 判定是否启动连接；失败是什么意思不知道
                    if (isConnecting) {
                        textHint.setText("正在连接蓝牙笔，请确保蓝牙笔开启");
                        // TODO：在这个线程里加判断，写个好看点的进度条
                        startMonitoringBluetoothConnection(textHint);
                    } else {
                        textHint.setText("蓝牙连接请求失败，请确保已授予权限");
                    }
                } else {
                    textHint.setText("Mac地址无效，请检查蓝牙笔地址或重新绑定蓝牙笔记");
                }
//                Util.macConvert(text)
            }
        });

        // 同理，连接第二支笔
        // TODO：加锁或者其他方法控制，不能让用户点击连接第一支笔按钮，又点连接第二支笔按钮，脑残操作
        button2.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                String text = String.valueOf(editText2.getText());
                if (text.length() == 16) {
                    String macAddress = text.substring(text.length() - 12);
                    // 连接蓝牙笔

                    boolean isConnecting = BiBiCommand.connect(getContext(), DrawUtil.macConvert(macAddress),true);

                    // 判定是否启动连接；失败是什么意思不知道
                    if (isConnecting) {
                        textHint.setText("正在连接蓝牙笔，请确保蓝牙笔开启");
                        // TODO：在这个线程里加判断，写个好看点的进度条
                        startMonitoringBluetoothConnection(textHint);
                    } else {
                        textHint.setText("蓝牙连接请求失败，请确保已授予权限");
                    }
                } else {
                    textHint.setText("Mac地址无效，请检查蓝牙笔地址或重新绑定蓝牙笔记");
                }
            }
        });

        // 跳转到绑笔窗，可能这里并没有笔所以需要到绑定笔的页面绑定一下
        // TODO：待实现
        btn_bind_new_pen.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                showBluetoothBindingDialog(requireContext());

            }
        });

        // 关闭窗
        btn_close_dialog.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                alertDialog.dismiss();
            }
        });


        // 窗口关闭时的回调。如果关闭时没有连接笔的话，提示不能开始答题
        // TODO: 设置带按钮的SnakeBar提示，按钮设置为重新打开弹窗；或者其他实现
        builder.setOnDismissListener(new DialogInterface.OnDismissListener() {
            @Override
            public void onDismiss(DialogInterface dialog) {
            }
        });

        alertDialog.show();
    }


    // 连接进程
    private Handler BLEConnectHandler;

    private void startMonitoringBluetoothConnection(TextView textView) {
        // 模拟子线程，在5秒后结束子线程
        new Thread(new Runnable() {
            @Override
            public void run() {
                int totalDuration = 5000; // 子线程运行总时长（毫秒）
                int checkInterval = 1000; // 每次检查间隔时间（毫秒）

                int elapsedTime = 0;
                boolean isConnected = false;

                while (elapsedTime <= totalDuration) {
                    // 检查蓝牙连接状态，假设此为获取蓝牙连接状态的方法
                    isConnected = MyApp.getInstance().isBiPenConnected();

                    if (isConnected) {
                        // 已连接，更新 TextView
                        BLEConnectHandler.post(new Runnable() {
                            @Override
                            public void run() {
                                textView.setText("蓝牙笔连接成功");
                            }
                        });
                        break; // 结束子线程
                    }

                    try {
                        Thread.sleep(checkInterval);
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    }

                    elapsedTime += checkInterval;
                }

                // 循环结束，连接可能失败
                if (!isConnected) {
                    BLEConnectHandler.post(new Runnable() {
                        @Override
                        public void run() {
                            textView.setText("蓝牙连接失败，请检查MAC地址且确保蓝牙笔开启");
                        }
                    });
                }
            }
        }).start();
    }


    // 判断是否连接蓝牙以及开启蓝牙权限 移到主页面即可
    private void checkBluetoothPermission() {
        // 检查蓝牙权限是否已授予
        // 写满权限
        if (ContextCompat.checkSelfPermission(getContext(), Manifest.permission.BLUETOOTH) != PackageManager.PERMISSION_GRANTED ||
                ContextCompat.checkSelfPermission(getContext(), Manifest.permission.BLUETOOTH_ADMIN) != PackageManager.PERMISSION_GRANTED ||
                ContextCompat.checkSelfPermission(getContext(), Manifest.permission.BLUETOOTH_CONNECT) != PackageManager.PERMISSION_GRANTED ||
                ContextCompat.checkSelfPermission(getContext(), Manifest.permission.BLUETOOTH_SCAN) != PackageManager.PERMISSION_GRANTED ||
                ContextCompat.checkSelfPermission(getContext(), Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED ||
                ContextCompat.checkSelfPermission(getContext(), Manifest.permission.ACCESS_COARSE_LOCATION) != PackageManager.PERMISSION_GRANTED

        ) {
            // 权限未被授予，需要申请权限
            Toast.makeText(getContext(), "权限未被授予，需要申请权限", Toast.LENGTH_SHORT);
            ActivityCompat.requestPermissions(getActivity(), new String[]{
                    Manifest.permission.BLUETOOTH,
                    Manifest.permission.BLUETOOTH_ADMIN,
                    Manifest.permission.BLUETOOTH_CONNECT,
                    Manifest.permission.BLUETOOTH_SCAN,
                    Manifest.permission.ACCESS_FINE_LOCATION,
                    Manifest.permission.ACCESS_COARSE_LOCATION
            }, REQUEST_BLUETOOTH_PERMISSION);
        } else {
            // 权限已被授予，可以进行蓝牙操作
            Toast.makeText(getContext(), "权限已被授予，可以进行蓝牙操作", Toast.LENGTH_SHORT);
        }
    }

    @Override
    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {
        super.onRequestPermissionsResult(requestCode, permissions, grantResults);
        if (requestCode == REQUEST_BLUETOOTH_PERMISSION) {

            // 0表示授权成功，-1失败，全都为0即成功
            int grantResultsSum = 0;
            for (int grantResult : grantResults) {
                grantResultsSum += grantResult;
            }
            if (grantResults.length > 0 && grantResultsSum == PackageManager.PERMISSION_GRANTED) {
                // 权限已被授予，可以进行蓝牙操作
                Log.e(TAG, "权限已被授予，可以进行蓝牙操作");
                for (int i = 0; i < grantResults.length; i++) {
                    Log.e(TAG, "permission " + permissions[i] + ":" + grantResults[i]);
                }

            } else {
                // 权限被拒绝，无法执行蓝牙操作
                Log.e(TAG, "权限被拒绝，无法执行蓝牙操作");
                // 可以根据需要进行处理，例如显示一个提示信息或关闭应用程序
            }
        }
    }

    com.bbb.bpen.delegate.BlueDelegate blueDelegate = new com.bbb.bpen.delegate.BlueDelegate() {
        @Override
        public void didDiscoverWithPen(Pen device, int rssi) {
        }

        @Override
        public void didConnectFail(BluetoothGatt gatt, int status, int newState) {
            Log.e(TAG, "didConnectFail, status:" + status + " newState:" + newState);
        }

        // 连接时的状态主要由以下两个回调函数判定
        // 接收到消息时得全局存储消息，以确定蓝牙笔是否连接
        @Override
        public void didDisconnect(Pen device, int status, int newState) {
            MyApp.getInstance().setBiPenConnected(false);
            MyApp.getInstance().setMacAddress(null);

            Log.e(TAG, "didDisconnect, status:" + status + " newState:" + newState);
        }

        @Override
        public void didConnect(Pen device, int status, int newState) {
            MyApp.getInstance().setBiPenConnected(true);
            MyApp.getInstance().setMacAddress(device.getAddress());

            Log.e(TAG, "didConnect, status:" + status + " newState:" + newState);
            Log.e(TAG, "didConnect, device mac:" + device.getAddress());
        }

        @Override
        public void notifyBattery(int battery) {
        }

        // 绘图重要函数
        @Override
        public void notifyRealTimePointData(List<PointData> pointDrawArray) {
            PointManager.getInstance().addPointToList(pointDrawArray);
            dw.notifyDraw();

            if (pointDrawArray != null && pointDrawArray.size() > 0) {
                PointData endPoint = pointDrawArray.get(pointDrawArray.size() - 1);
                if (endPoint.isStroke_end()) {

                    // 发送广播，提醒判定是否要触发相应的事件了
                    Intent intent = new Intent("CheckForEventTrigger");
                    getContext().sendBroadcast(intent);
                }
            }

        }

        @Override
        public void notifyBatchPointData(List<PointData> pointDrawArray) {
        }

        @Override
        public void notifyFirmwareWithNewVersion(String newVersion) {
        }

        @Override
        public void notifyDataSynchronizationMode(int mode) {
        }

        @Override
        public void notifyContinueToUseSuccess() {
            Log.e(TAG, "notifyContinueToUseSuccess");
        }

        @Override
        public void notifyContinueToUseFail() {
            Log.e(TAG, "notifyContinueToUseFail");
        }

        @Override
        public void notifyBoundMobile(String mobile) {
        }

        @Override
        public void notifyModel(String model) {
            Log.e(TAG, "notifyModel:" + model);
        }

        @Override
        public void unsynchronizedDataWithPercentage(float percentage) {
        }

        @Override
        public void notifySyncComplete() {
        }

        @Override
        public void accelerometerDataSendFromPenOnXYZ(float x, float y, float z, int jiaodu) {
        }

        @Override
        public void notifyWrittingBatchPointData(List<PointData> pointDrawArray) {
        }

        @Override
        public void notifyOfflineBatchPointData(List<PointData> list, int i) {

        }

        @Override
        public void notifyCameraState() {
        }

        @Override
        public void notifyChargeState(int chargestatus) {
        }
    };

    private ServiceConnection coon = new ServiceConnection() {
        @Override
        public void onServiceConnected(ComponentName name, IBinder binder) {
            isBound = true;
            BiBiBinder myBinder = (BiBiBinder) binder;
            service = myBinder.getService();
            service.setblueDelegate(blueDelegate);
        }

        @Override
        public void onServiceDisconnected(ComponentName name) {
            Log.e(TAG, "onServiceDisconnected ");
            isBound = false;
        }
    };

    private void hideSystemUI() {
        View decorView = getActivity().getWindow().getDecorView();
        int uiOptions = View.SYSTEM_UI_FLAG_FULLSCREEN
                | View.SYSTEM_UI_FLAG_HIDE_NAVIGATION
                | View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY;
        decorView.setSystemUiVisibility(uiOptions);
    }

}