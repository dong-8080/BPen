package com.example.bibipentest.fragment;

import android.content.Context;
import android.content.DialogInterface;
import android.os.Bundle;

import androidx.appcompat.app.AlertDialog;
import androidx.cardview.widget.CardView;
import androidx.fragment.app.Fragment;
import androidx.navigation.Navigation;

import android.os.Handler;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.EditText;
import android.widget.TextView;
import android.widget.Toast;

import com.example.bibipentest.MyApp;
import com.example.bibipentest.R;
import com.example.bibipentest.json.RequestBingingPen;
import com.example.bibipentest.json.RequestUnbindingPen;
import com.example.bibipentest.json.ResponseObject;
import com.example.bibipentest.json.ResponseUserPenList;
import com.example.bibipentest.json.SubmitResponse;
import com.example.bibipentest.util.HttpUtil;
import com.google.android.material.textfield.TextInputEditText;
import com.google.gson.Gson;

import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import okhttp3.MediaType;
import okhttp3.RequestBody;


public class PenBindFragment extends Fragment implements View.OnClickListener {
    private static final String TAG = "PenBindFragment";

    private Button btn_bind_new_pen, btn_backup;
    private TextInputEditText et_mac_address;

    private CardView card_item_1, card_item_2, card_item_3;
    private TextInputEditText tv_mac_address_item_1, tv_mac_address_item_2, tv_mac_address_item_3;
    private Button btn_unbind_item_1, btn_unbind_item_2, btn_unbind_item_3;


    // TODO: 添加笔绑定信息
    // 需要功能: 拉取当前已绑定笔；已经绑定笔后面按钮实现解绑功能；未绑定笔实现绑定功能；设置一个List来展示当前的笔
    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container,
                             Bundle savedInstanceState) {
        View rootView = inflater.inflate(R.layout.fragment_pen_bind, container, false);

        btn_bind_new_pen = rootView.findViewById(R.id.btn_bind_new_pen);
        btn_backup = rootView.findViewById(R.id.btn_backup);

        card_item_1 = rootView.findViewById(R.id.card_item_1);
        card_item_2 = rootView.findViewById(R.id.card_item_2);
        card_item_3 = rootView.findViewById(R.id.card_item_3);

        tv_mac_address_item_1 = rootView.findViewById(R.id.mac_address_item_1);
        tv_mac_address_item_2 = rootView.findViewById(R.id.mac_address_item_2);
        tv_mac_address_item_3 = rootView.findViewById(R.id.mac_address_item_3);

        btn_unbind_item_1 = rootView.findViewById(R.id.unbind_item_1);
        btn_unbind_item_2 = rootView.findViewById(R.id.unbind_item_2);
        btn_unbind_item_3 = rootView.findViewById(R.id.unbind_item_3);


        btn_bind_new_pen.setOnClickListener(this);
        btn_backup.setOnClickListener(this);

        btn_unbind_item_1.setOnClickListener(this);
        btn_unbind_item_2.setOnClickListener(this);
        btn_unbind_item_3.setOnClickListener(this);


        // 刷新card，主要控制card的隐藏显示以及文本标签
        refresh();

        return rootView;
    }

    @Override
    public void onClick(View view) {
        if (view.getId() == R.id.btn_bind_new_pen) {
            // 绑定新的笔，当已超过三支时不允许绑定
            List<String> bindedMacAddress = MyApp.getInstance().getBindedMacAddresses();
            int penBindNum = 0;
            if(bindedMacAddress!=null) {
                penBindNum = bindedMacAddress.size();
            }
            if (penBindNum==3){
                Toast.makeText(getContext(), "最多绑定三支笔，请先解绑后再重新绑定", Toast.LENGTH_LONG).show();
                return;
            }

            showPenBindingDialog();
        } else if (view.getId() == R.id.btn_backup) {
            Navigation.findNavController(view).popBackStack();
        } else if (view.getId() == R.id.unbind_item_1) {

            String macAddress = String.valueOf(tv_mac_address_item_1.getText());
            unBindPen(macAddress);
        } else if (view.getId() == R.id.unbind_item_2) {

            String macAddress = String.valueOf(tv_mac_address_item_2.getText());
            unBindPen(macAddress);
        } else if (view.getId() == R.id.unbind_item_3) {

            String macAddress = String.valueOf(tv_mac_address_item_3.getText());
            unBindPen(macAddress);
        }

    }

    // 点击解绑按钮后，触发解绑操作，并刷新一下页面
    private void unBindPen(String macAddress){
        // 向后端发送解绑请求，成功则刷新页面，失败弹窗
        String url = "http://10.110.147.81:8088/penUser/unbindingpen";

        RequestUnbindingPen req = new RequestUnbindingPen(macAddress);

        Gson gson = new Gson();

        RequestBody requestBody = RequestBody.create(
                MediaType.parse("application/json"),
                gson.toJson(req)
        );

        HttpUtil httpUtil = HttpUtil.getInstance();
        httpUtil.postRequest(url, requestBody, new HttpUtil.OkHttpCallback() {
            @Override
            public void onResponse(String response) {
                Gson gson = new Gson();
                ResponseObject responseObject = gson.fromJson(response, ResponseObject.class);
                String toastMessage = responseObject.getMsg();
                uiHandler.post(new Runnable() {
                    @Override
                    public void run() {
                        Toast.makeText(MyApp.getInstance(), toastMessage, Toast.LENGTH_SHORT).show();
                        refresh();
                    }
                });
            }

            @Override
            public void onFailure(IOException e) {
                Log.e("HTTPTEST", "onFailure");
                Log.e("HTTPTEST", e.toString());
            }
        });
//        refreshCard();
    }

    private Handler uiHandler = new Handler();

    // 从后端获取已绑定笔数据，刷新页面
    private void refresh(){
        String url = "http://10.110.147.81:8088/penUser/getuserpenlist";

        HttpUtil httpUtil = HttpUtil.getInstance();

        Map<String, String> queryParams = new HashMap<>();
        queryParams.put("phone", MyApp.getInstance().getPhone());

        httpUtil.getRequest(url, queryParams, new HttpUtil.OkHttpCallback() {
            @Override
            public void onResponse(String response) {
                Gson gson = new Gson();
                ResponseUserPenList res = gson.fromJson(response, ResponseUserPenList.class);
                String toastMessage = res.getMsg();


                if (res.getCode().equals("200")){
                    List<String> macAddresses = new ArrayList<>();
                    for(int i=0;i<res.getData().size();i++){
                        macAddresses.add(res.getData().get(i).getMacAddress());
                    }
                    MyApp.getInstance().setBindedMacAddresses(macAddresses);

                    uiHandler.post(new Runnable() {
                        @Override
                        public void run() {
                            refreshCard();
                        }
                    });
                } else{
                    uiHandler.post(new Runnable() {
                        @Override
                        public void run() {
                            Toast.makeText(getContext(), toastMessage,Toast.LENGTH_LONG);
                        }
                    });
                }

            }

            @Override
            public void onFailure(IOException e) {
                Log.e("HTTPTEST", "onFailure");
                Log.e("HTTPTEST", e.toString());
            }
        });
    }

    private void refreshCard(){

        List<String> bindedMacAddress = MyApp.getInstance().getBindedMacAddresses();
        int penBindNum = bindedMacAddress.size();
        if(penBindNum==0){
            card_item_1.setVisibility(View.GONE);
            card_item_2.setVisibility(View.GONE);
            card_item_3.setVisibility(View.GONE);
        } else if (penBindNum==1) {
            card_item_1.setVisibility(View.VISIBLE);
            card_item_2.setVisibility(View.GONE);
            card_item_3.setVisibility(View.GONE);

            tv_mac_address_item_1.setText(bindedMacAddress.get(0));
        } else if (penBindNum==2) {
            card_item_1.setVisibility(View.VISIBLE);
            card_item_2.setVisibility(View.VISIBLE);
            card_item_3.setVisibility(View.GONE);

            tv_mac_address_item_1.setText(bindedMacAddress.get(0));
            tv_mac_address_item_2.setText(bindedMacAddress.get(1));
        } else if (penBindNum==3) {
            card_item_1.setVisibility(View.VISIBLE);
            card_item_2.setVisibility(View.VISIBLE);
            card_item_3.setVisibility(View.VISIBLE);

            tv_mac_address_item_1.setText(bindedMacAddress.get(0));
            tv_mac_address_item_2.setText(bindedMacAddress.get(1));
            tv_mac_address_item_3.setText(bindedMacAddress.get(2));
        }
    }

    public void showPenBindingDialog(){
        LayoutInflater inflater = LayoutInflater.from(getContext());
        View dialogView = inflater.inflate(R.layout.dialog_pen_binding, null);

        TextView textHint = dialogView.findViewById(R.id.textHint);
        EditText ed_mac_address = dialogView.findViewById(R.id.et_mac_address);
        Button btn_binded = dialogView.findViewById(R.id.btn_binded);

        Button btn_close_dialog = dialogView.findViewById(R.id.btn_close_dialog);


        AlertDialog.Builder builder = new AlertDialog.Builder(getContext());
        builder.setView(dialogView);

        AlertDialog alertDialog = builder.create();
        alertDialog.getWindow().setBackgroundDrawableResource(R.drawable.dialog_rounded_corners);
        alertDialog.setCanceledOnTouchOutside(false);

        // 全局显示，并取消系统的底部状态栏
        int uiOptions = View.SYSTEM_UI_FLAG_FULLSCREEN
                | View.SYSTEM_UI_FLAG_HIDE_NAVIGATION
                | View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY;
        alertDialog.getWindow().getDecorView().setSystemUiVisibility(uiOptions);

        btn_binded.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                String macAddress = String.valueOf(ed_mac_address.getText());
                // 确认绑定，提交后端
                // 设定为只有测试连接成功后才能进行绑定
                bindingPenRequest(macAddress);
            }
        });
        btn_close_dialog.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                alertDialog.dismiss();
            }
        });

        // show alert dialog
        alertDialog.show();
    }


    private void bindingPenRequest(String macAddress){
        String url = "http://10.110.147.81:8088/penUser/bindingpen";

        RequestBingingPen req = new RequestBingingPen(MyApp.getInstance().getPhone(), macAddress);

        Gson gson = new Gson();

        RequestBody requestBody = RequestBody.create(
                MediaType.parse("application/json"),
                gson.toJson(req)
        );

        HttpUtil httpUtil = HttpUtil.getInstance();
        httpUtil.postRequest(url, requestBody, new HttpUtil.OkHttpCallback() {
            @Override
            public void onResponse(String response) {
                Gson gson = new Gson();
                ResponseObject responseObject = gson.fromJson(response, ResponseObject.class);
                String toastMessage = responseObject.getMsg();

                uiHandler.post(new Runnable() {
                    @Override
                    public void run() {
                        Toast.makeText(MyApp.getInstance(), toastMessage, Toast.LENGTH_SHORT).show();
                        refresh();
                    }
                });
            }

            @Override
            public void onFailure(IOException e) {
                Log.e("HTTPTEST", "onFailure");
                Log.e("HTTPTEST", e.toString());
            }
        });
    }
}