package com.example.bibipentest.broadcast;

import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.util.Log;
import android.view.View;

import com.bbb.bpen.model.PointData;
import com.example.bibipentest.data.PointManager;
import com.example.bibipentest.view.DrawingView;
import com.example.bibipentest.virtual.VirtualButton;
import com.example.bibipentest.virtual.VirtualButtonFactory;
import com.example.bibipentest.virtual.VirtualButtonSubmit;

import java.util.List;

public class EventTriggerReceiver extends BroadcastReceiver {

    // TODO: 测试调整点击初判的阈值
    private static final float CLICK_TOLERANCE = 2;
    private static String TAG = "EventTriggerReceiver";

    public EventTriggerReceiver(){}

    // 临时用于UI修改
    private DrawingView drawingView;
    public EventTriggerReceiver(DrawingView view){
        this.drawingView = view;
    }

    // 广播中好像不能进行复杂的操作可能需要异步操作
    @Override
    public void onReceive(Context context, Intent intent) {
        List<PointData> lastStroke = PointManager.getInstance().getLatestStroke();
        if (isPotentialClickEvent(lastStroke, CLICK_TOLERANCE)) {
            // 需要把这一段点点的笔迹删掉吗
            Log.e(TAG, "初判通过，触发后续事件");
            float[] strokeCenter = getStrokeCenter(lastStroke);
            float x_center = strokeCenter[0];
            float y_center = strokeCenter[1];

            triggerVirtualButton(x_center, y_center);
        }

    }

    // 依据移动距离来判断是否为一个点击事件，阈值要准确判定
    // 阈值太大，则所有笔迹都会通过判定；阈值太小只有按点才能通过判定
    private boolean isPotentialClickEvent(List<PointData> list, float tolerance) {

        float totalDistance = 0;
        float lastX = list.get(0).get_x();
        float lastY = list.get(0).get_y();

        for (int i = 1; i < list.size() - 1; i++) {
            float currentX = list.get(i).get_x();
            float currentY = list.get(i).get_y();
            totalDistance += Math.sqrt(Math.pow(currentX - lastX, 2) + Math.pow(currentY - lastY, 2));
            // 更新上一个点的坐标
            lastX = currentX;
            lastY = currentY;
        }
//        Log.e(TAG, "stroke distance:"+totalDistance);
        return totalDistance < tolerance;
    }

    private float[] getStrokeCenter(List<PointData> list) {
        float totalX = 0;
        float totalY = 0;
        // 最后一个点通常是(0，0)
        list.remove(list.size() - 1);
        for (PointData p : list) {
            totalX += p.get_x();
            totalY += p.get_y();
        }

        float[] result = new float[2];
        result[0] = totalX / list.size();
        result[1] = totalY / list.size();

        return result;
    }

    // TODO：工厂模式创建的是父类对象，调用共有方法即triggerclick,这里演示多弄了点函数
    private void triggerVirtualButton(float x, float y) {
        VirtualButtonFactory factory = new VirtualButtonFactory();
        VirtualButton button = factory.createVirtualButton(x, y);
        if (button==null){
            // 距离中心点太远，创建失败
            Log.e(TAG, "virtual button is null");
            return;
        }

        Log.e(TAG, "virtual button created.");

        button.triggerClick();
        button.testMethod(drawingView);


    }
}