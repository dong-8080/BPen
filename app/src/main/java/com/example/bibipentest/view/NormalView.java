package com.example.bibipentest.view;


import android.content.Context;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.Paint;
import android.graphics.Rect;
import android.graphics.drawable.BitmapDrawable;
import android.util.AttributeSet;
import android.util.Log;

import com.bbb.bpen.common.BijiListType;
import com.bbb.bpen.model.Paper;
import com.bbb.bpen.model.PointData;
import com.example.bibipentest.util.Util;

import java.io.IOException;
import java.io.InputStream;
import java.util.HashMap;

public class NormalView extends ZoomView {


    Paint mDrawpaint;
    PointData lastpoint;
    PointData lastbgpoint;

    float StrokeWidth = 0.1f;
    float PENWIDTH_MIN = 0.1f;

    //    Bitmap pagebg;
    Context context;
    int pagetype = -1;
    long pageid = -1;

    float page_width;
    float page_height;

    public float page_width_forscreen; //画布宽 px
    public float page_height_forscreen; //画布高 px

    int bmp_width;
    int bmp_height;


    HashMap<String, Bitmap> bmp_list = new HashMap<String, Bitmap>();

    public NormalView(Context context) {
        super(context);
        this.context = context;
        setWillNotDraw(false);
    }

    public NormalView(Context context, AttributeSet attrs) {
        super(context, attrs);
        this.context = context;
        setWillNotDraw(false);
    }

    public NormalView(Context context, AttributeSet attrs, int defStyle) {
        super(context, attrs, defStyle);
        this.context = context;
        setWillNotDraw(false);
    }

    public void initDraw(HashMap<String, Bitmap> bmp_list) {
        super.initDraw();

        this.bmp_list = bmp_list;

        mDrawpaint = new Paint(Paint.DITHER_FLAG | Paint.ANTI_ALIAS_FLAG);
        mDrawpaint.setStyle(Paint.Style.STROKE);
        mDrawpaint.setStrokeWidth(1);
        mDrawpaint.setColor(Color.BLACK);
        mDrawpaint.setAntiAlias(true); // 抗锯齿
        mDrawpaint.setStrokeJoin(Paint.Join.ROUND);
        mDrawpaint.setStrokeCap(Paint.Cap.ROUND);
    }

    public Bitmap getPageBitmap(Context mContext, String pagetype, String pageno , boolean whitebg) {
        BitmapDrawable bmpMeizi = null;

        if(!whitebg && this.bmp_list.containsKey(pagetype + "_" + pageno)){
            return this.bmp_list.get(pagetype + "_" + pageno);
        }

        // 获取纸背景
        String pagename = BijiListType.__paper_name[Util.getIntByStr(pagetype)];
        String fileName = pagename + "-" + pageno + ".png";
        try {
            InputStream is = mContext.getAssets().open(fileName);
            Bitmap mBitmap = BitmapFactory.decodeStream(is);
            return mBitmap;
        } catch (IOException e) {
            e.printStackTrace();
        }
        return null;
    }

    public  Bitmap getPageBitmap(Context mContext, String pagetype, String pageno) {
        return getPageBitmap( mContext,  pagetype,  pageno , false);
    }

    public void drawNormalBmpPoint(PointData pdata, int color, int pwidth, float penwidth) {

        float xStart, yStart, xEnd, yEnd, pStart;
        if (pagetype != pdata.getPaper_type() || pageid != pdata.getPage_id()) {
            if(this.mtempbitmap != null && this.bmp_width > 0 && this.bmp_height > 0){
                Bitmap b_store1 = Bitmap.createBitmap(this.mtempbitmap,0,0,(int)page_width_forscreen,(int)page_height_forscreen);
                Bitmap b_store = Bitmap.createScaledBitmap(b_store1,this.bmp_width,this.bmp_height,false);
                this.bmp_list.put(pagetype + "_" + pageid,b_store);
            }

            pagetype = pdata.getPaper_type();
            pageid = pdata.getPage_id();
            Bitmap pagebg = getPageBitmap(getContext(), pdata.getPaper_type() + "", pdata.getPage_id() + "");


            if (pagebg != null) {
                Log.d("drawBmpPoint ", " pagebg null 11 " );

                this.bmp_width = pagebg.getWidth();
                this.bmp_height = pagebg.getHeight();

                float[] f1 = Util.getBitmapdpisize(pagebg);
                page_width = f1[0];
                page_height = f1[1];

                float f[] = Util.getC_width(context, page_width, page_height);
                page_width_forscreen = f[0];
                page_height_forscreen = f[1];

                Paint p = new Paint();
                p.setColor(Color.WHITE);
                p.setStyle(Paint.Style.FILL);

                mcanvas.drawRect(
                        new Rect(0, 0,
                                (int) mcanvas.getWidth(),
                                (int) mcanvas.getHeight()), p);

                mcanvas.drawBitmap(pagebg, new Rect(0, 0, pagebg.getWidth(), pagebg.getHeight()),
                        new Rect(0, 0,
                                (int) page_width_forscreen,
                                (int) page_height_forscreen), mDrawpaint);

                Log.d("drawBmpPoint ", " drawBmpPoint " + page_width + "  " + page_height
                        + "  " + page_width_forscreen + "  " + page_height_forscreen + "  "
                        + pagebg.getWidth() + "  " + pagebg.getHeight());

            } else {
                Paper paper = new Paper(pagetype);
                page_width = paper.getWidth();
                page_height = paper.getHeight();

                int ff[] = Util.getBmpsize(page_width, page_height);
                this.bmp_width = ff[0];
                this.bmp_height = ff[1];


                float f[] = Util.getC_width(context, page_width, page_height);
                page_width_forscreen = f[0];
                page_height_forscreen = f[1];

                Paint p = new Paint();
                p.setColor(Color.WHITE);
                p.setStyle(Paint.Style.FILL);
                mcanvas.drawRect(
                        new Rect(0, 0,
                                (int) mcanvas.getWidth(),
                                (int) mcanvas.getHeight()), p);

                Log.d("drawBmpPoint ", " drawBmpPoint @@@@  " + page_width + "  " + page_height
                        + "  " + page_width_forscreen + "  " + page_height_forscreen);

            }


            isLoaded = true;

            primaryW = page_width_forscreen;
            primaryH = page_height_forscreen;
        }


        float c_width = page_width_forscreen;
        float c_height = page_height_forscreen;


        //获取ppi计算
        float width_dangliangbi = pdata.get_x() / page_width;
        float height_dangliangbi = pdata.get_y() / page_height;
//        Log.d("onDraw ", "height_dangliangbi  " + width_dangliangbi + "  " + height_dangliangbi);
        int color_pd = color;
        float s_width = StrokeWidth * penwidth;
        mDrawpaint.setColor(color_pd);
//        Log.d("initDraw ", " textSpeedTime @@@ ### ##" + color_pd);
        mDrawpaint.setStrokeWidth(s_width);
        if (lastpoint == null || pdata.isStroke_start() == true) {
            lastpoint = pdata;
        }

        float last_width_dangliangbi = lastpoint.get_x() / page_width;
        float last_height_dangliangbi = lastpoint.get_y() / page_height;

        s_width = PENWIDTH_MIN + StrokeWidth * penwidth + pwidth;
        mDrawpaint.setStrokeWidth(s_width);

        xStart = c_width * width_dangliangbi;
        yStart = c_height * height_dangliangbi;
        xEnd = c_width * last_width_dangliangbi;
        yEnd = c_height * last_height_dangliangbi;

        lastpoint = pdata;

        drawline(xStart, yStart, xEnd, yEnd, mDrawpaint);

    }

    public void drawBgNormalBmp(PointData pdata, int color, int pwidth, float penwidth,int index) {

        float xStart, yStart, xEnd, yEnd, pStart;
        if (index == 0) {
            if(this.mtempbitmap != null && this.bmp_width > 0 && this.bmp_height > 0){
                Bitmap b_store1 = Bitmap.createBitmap(this.mtempbitmap,0,0,(int)page_width_forscreen,(int)page_height_forscreen);
                Bitmap b_store = Bitmap.createScaledBitmap(b_store1,this.bmp_width,this.bmp_height,false);
                this.bmp_list.put(pagetype + "_" + pageid,b_store);
            }

            pagetype = pdata.getPaper_type();
            pageid = pdata.getPage_id();
            Bitmap pagebg = getPageBitmap(getContext(), pdata.getPaper_type() + "", pdata.getPage_id() + "",true);


            if (pagebg != null) {
                Log.d("drawBmpPoint ", " pagebg null 11 " );

                this.bmp_width = pagebg.getWidth();
                this.bmp_height = pagebg.getHeight();

                float[] f1 = Util.getBitmapdpisize(pagebg);
                page_width = f1[0];
                page_height = f1[1];



                float f[] = Util.getC_width(context, page_width, page_height);
                page_width_forscreen = f[0];
                page_height_forscreen = f[1];

                Paint p = new Paint();
                p.setColor(Color.WHITE);
                p.setStyle(Paint.Style.FILL);

                mbgcanvas.drawRect(
                        new Rect(0, 0,
                                (int) mbgcanvas.getWidth(),
                                (int) mbgcanvas.getHeight()), p);

                mbgcanvas.drawBitmap(pagebg, new Rect(0, 0, pagebg.getWidth(), pagebg.getHeight()),
                        new Rect(0, 0,
                                (int) page_width_forscreen,
                                (int) page_height_forscreen), mDrawpaint);

                Log.d("drawBmpPoint ", " drawBmpPoint " + page_width + "  " + page_height
                        + "  " + page_width_forscreen + "  " + page_height_forscreen + "  "
                        + pagebg.getWidth() + "  " + pagebg.getHeight());

            } else {
                Paper paper = new Paper(pagetype);
                page_width = paper.getWidth();
                page_height = paper.getHeight();

                int ff[] = Util.getBmpsize(page_width, page_height);
                this.bmp_width = ff[0];
                this.bmp_height = ff[1];


                float f[] = Util.getC_width(context, page_width, page_height);
                page_width_forscreen = f[0];
                page_height_forscreen = f[1];

                Paint p = new Paint();
                p.setColor(Color.WHITE);
                p.setStyle(Paint.Style.FILL);
                mbgcanvas.drawRect(
                        new Rect(0, 0,
                                (int) mbgcanvas.getWidth(),
                                (int) mbgcanvas.getHeight()), p);

                Log.d("drawBmpPoint ", " drawBmpPoint @@@@  " + page_width + "  " + page_height
                        + "  " + page_width_forscreen + "  " + page_height_forscreen);
            }

            isLoaded = true;

            primaryW = page_width_forscreen;
            primaryH = page_height_forscreen;
        }


        float c_width = page_width_forscreen;
        float c_height = page_height_forscreen;


        //获取ppi计算
        float width_dangliangbi = pdata.get_x() / page_width;
        float height_dangliangbi = pdata.get_y() / page_height;
        Log.d("onDraw ", "height_dangliangbi  " + width_dangliangbi + "  " + height_dangliangbi);
        int color_pd = color;
        float s_width = StrokeWidth * penwidth;
        mDrawpaint.setColor(color_pd);
        Log.d("initDraw ", " textSpeedTime @@@ ### ##" + color_pd);
        mDrawpaint.setStrokeWidth(s_width);
        if (lastbgpoint == null || pdata.isStroke_start() == true) {
            lastbgpoint = pdata;
        }

        float last_width_dangliangbi = lastbgpoint.get_x() / page_width;
        float last_height_dangliangbi = lastbgpoint.get_y() / page_height;

        s_width = PENWIDTH_MIN + StrokeWidth * penwidth + pwidth;
        mDrawpaint.setStrokeWidth(s_width);

        xStart = c_width * width_dangliangbi;
        yStart = c_height * height_dangliangbi;
        xEnd = c_width * last_width_dangliangbi;
        yEnd = c_height * last_height_dangliangbi;

        lastbgpoint = pdata;

        mbgcanvas.drawLine(xStart, yStart, xEnd, yEnd, mDrawpaint);

    }


    public void drawline(float xStart, float yStart, float xEnd, float yEnd, Paint mDrawpaint) {
//        Log.d("onDraw ", "drawline  " + xStart + "  " + yStart);
        mcanvas.drawLine(xStart, yStart, xEnd, yEnd, mDrawpaint);
    }

    Bitmap pagebg;
    public void cleanCanvas( ){
        pagebg = getPageBitmap(getContext(), pagetype + "",  pageid + "");

        if (pagebg == null && pagetype == 2) {
            pagebg = getPageBitmap(getContext(), "2", "1401");
        }
        if (pagebg != null) {
            float[] f1 = Util.getBitmapdpisize(pagebg);
            page_width = f1[0];
            page_height = f1[1];

            float f[] = Util.getC_width(context, page_width, page_height);
            page_width_forscreen = f[0];
            page_height_forscreen = f[1];

            Paint p = new Paint();
            p.setColor(Color.WHITE);
            p.setStyle(Paint.Style.FILL);
            mcanvas.drawRect(
                    new Rect(0, 0,
                            (int) mcanvas.getWidth(),
                            (int) mcanvas.getHeight()), p);

            mcanvas.drawBitmap(pagebg, new Rect(0, 0, pagebg.getWidth(), pagebg.getHeight()),
                    new Rect(0, 0,
                            (int) page_width_forscreen,
                            (int) page_height_forscreen), mDrawpaint);

        } else {
            Paper paper = new Paper(pagetype);
            page_width = paper.getWidth();
            page_height = paper.getHeight();


            float f[] = Util.getC_width(context, page_width, page_height);
            page_width_forscreen = f[0];
            page_height_forscreen = f[1];

            Paint p = new Paint();
            p.setColor(Color.WHITE);
            p.setStyle(Paint.Style.FILL);
            mcanvas.drawRect(
                    new Rect(0, 0,
                            (int) mcanvas.getWidth(),
                            (int) mcanvas.getHeight()), p);
        }
    }

    @Override
    protected void onDraw(Canvas canvas) {
        Log.d("onDraw ", "normalview  " );
        super.onDraw(canvas);
    }


}