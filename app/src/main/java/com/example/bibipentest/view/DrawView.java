package com.example.bibipentest.view;


import android.content.Context;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.Paint;
import android.graphics.Rect;
import android.graphics.drawable.BitmapDrawable;
import android.util.AttributeSet;
import android.util.Log;

import com.bbb.bpen.common.BijiListType;
import com.bbb.bpen.model.Paper;
import com.bbb.bpen.model.PointData;
import com.example.bibipentest.util.Util;
import com.bbb.bbbdraw.bbbdrawmanager;

import java.io.IOException;
import java.io.InputStream;
import java.util.HashMap;

public class DrawView  extends ZoomView {

//    private Bitmap bitmap;
//    private Canvas canvas;

    HashMap<String, Bitmap> bmp_list = new HashMap<String, Bitmap>();

    Paint mDrawpaint;

    PointData lastpoint;

    float StrokeWidth = 3;
    float PENWIDTH_MIN = 0.5f;

    //    Bitmap pagebg;
    Context context;
    int pagetype = -1;
    long pageid = -1;

    float page_width;
    float page_height;

    int bmp_width;
    int bmp_height;

    public float page_width_forscreen; //画布宽 px
    public float page_height_forscreen; //画布高 px


    public DrawView(Context context) {
        super(context);
        this.context = context;
        setWillNotDraw(false);
    }

    public DrawView(Context context, AttributeSet attrs) {
        super(context, attrs);
        this.context = context;
        setWillNotDraw(false);
    }

    public DrawView(Context context, AttributeSet attrs, int defStyle) {
        super(context, attrs, defStyle);
        this.context = context;
        setWillNotDraw(false);
    }


    public void initDraw(HashMap<String, Bitmap> bmp_list) {
        super.initDraw();
        this.bmp_list = bmp_list;
        mDrawpaint = new Paint(Paint.DITHER_FLAG | Paint.ANTI_ALIAS_FLAG);
        mDrawpaint.setStyle(Paint.Style.STROKE);
        mDrawpaint.setStrokeWidth(1);
        mDrawpaint.setAntiAlias(true); // 抗锯齿
        mDrawpaint.setStrokeJoin(Paint.Join.ROUND);
        mDrawpaint.setStrokeCap(Paint.Cap.ROUND);
    }


    public  Bitmap getPageBitmap(Context mContext, String pagetype, String pageno , boolean whitebg) {
        BitmapDrawable bmpMeizi = null;

        Log.d("onDraw ", "getPageBitmap " + pagetype + "_" + pageno + "_## " + whitebg);

        if(!whitebg && this.bmp_list.containsKey(pagetype + "_" + pageno)){
            return this.bmp_list.get(pagetype + "_" + pageno);
        }

        Log.d("onDraw ", "getPageBitmap " + pagetype + "_" + pageno);

        String pagename = BijiListType.__paper_name[Util.getIntByStr(pagetype)];
        String fileName = pagename + "-" + pageno + ".png";
        try {
            InputStream is = mContext.getAssets().open(fileName);
            Bitmap mBitmap = BitmapFactory.decodeStream(is);
            return mBitmap;
        } catch (IOException e) {
            e.printStackTrace();
        }
        return null;
    }

    public  Bitmap getPageBitmap(Context mContext, String pagetype, String pageno) {
        return getPageBitmap( mContext,  pagetype,  pageno , false);
    }




    public void drawBmpPoint(PointData pdata, int color, int pwidth, float penwidth) {
        float xStart, yStart, xEnd, yEnd, pStart;
        int color_pd = color;
        mDrawpaint.setColor(color_pd);


        if (pagetype != pdata.getPaper_type() || pageid != pdata.getPage_id()) {

            if(this.mtempbitmap != null && this.bmp_width > 0 && this.bmp_height > 0){
                Bitmap b_store1 = Bitmap.createBitmap(this.mtempbitmap,0,0,(int)page_width_forscreen,(int)page_height_forscreen);
                Bitmap b_store = Bitmap.createScaledBitmap(b_store1,this.bmp_width,this.bmp_height,false);
                this.bmp_list.put(pagetype + "_" + pageid,b_store);
            }
            pagetype = pdata.getPaper_type();
            pageid = pdata.getPage_id();
            Bitmap pagebg = getPageBitmap(getContext(), pdata.getPaper_type() + "", pdata.getPage_id() + "");
            if (pagebg != null) {

                Log.d("drawBmpPoint ", " pagebg null " );

                this.bmp_width = pagebg.getWidth();
                this.bmp_height = pagebg.getHeight();

                float[] f1 = Util.getBitmapdpisize(pagebg);
                page_width = f1[0];
                page_height = f1[1];

                float f[] = Util.getC_width(context, page_width, page_height);
                page_width_forscreen = f[0];
                page_height_forscreen = f[1];

                Paint p = new Paint();
                p.setColor(Color.WHITE);
                p.setStyle(Paint.Style.FILL);
                mcanvas.drawRect(
                        new Rect(0, 0,
                                (int) mcanvas.getWidth(),
                                (int) mcanvas.getHeight()), p);

                mcanvas.drawBitmap(pagebg, new Rect(0, 0, pagebg.getWidth(), pagebg.getHeight()),
                        new Rect(0, 0,
                                (int) page_width_forscreen,
                                (int) page_height_forscreen), mDrawpaint);

                Log.d("drawBmpPoint ", " drawBmpPoint " + page_width + "  " + page_height
                        + "  " + page_width_forscreen + "  " + page_height_forscreen + "  "
                        + pagebg.getWidth() + "  " + pagebg.getHeight());

            } else {
                Paper paper = new Paper(pagetype);
                page_width = paper.getWidth();
                page_height = paper.getHeight();

                int ff[] = Util.getBmpsize(page_width, page_height);
                this.bmp_width = ff[0];
                this.bmp_height = ff[1];

                Log.d("drawBmpPoint ", " pagebg bmp_width bmp_height + " + this.bmp_width + "  " + this.bmp_height);

                float f[] = Util.getC_width(context, page_width, page_height);
                page_width_forscreen = f[0];
                page_height_forscreen = f[1];

                Paint p = new Paint();
                p.setColor(Color.WHITE);
                p.setStyle(Paint.Style.FILL);
                mcanvas.drawRect(
                        new Rect(0, 0,
                                (int) mcanvas.getWidth(),
                                (int) mcanvas.getHeight()), p);

                Log.d("drawBmpPoint ", " drawBmpPoint @@@@  " + page_width + "  " + page_height
                        + "  " + page_width_forscreen + "  " + page_height_forscreen);

            }



            isLoaded = true;

            primaryW = page_width_forscreen;
            primaryH = page_height_forscreen;
        }



        bbbdrawmanager.DrawLine( mcanvas , pdata, mDrawpaint, page_width, page_height,
                page_width_forscreen, page_height_forscreen, 3 + pwidth);


    }

    Bitmap pagebg;
    public void cleanCanvas( ){
        pagebg = getPageBitmap(getContext(), pagetype + "",  pageid + "");


        if (pagebg != null) {
            float[] f1 = Util.getBitmapdpisize(pagebg);
            page_width = f1[0];
            page_height = f1[1];

            float f[] = Util.getC_width(context, page_width, page_height);
            page_width_forscreen = f[0];
            page_height_forscreen = f[1];

            Paint p = new Paint();
            p.setColor(Color.WHITE);
            p.setStyle(Paint.Style.FILL);
            mcanvas.drawRect(
                    new Rect(0, 0,
                            (int) mcanvas.getWidth(),
                            (int) mcanvas.getHeight()), p);

            mcanvas.drawBitmap(pagebg, new Rect(0, 0, pagebg.getWidth(), pagebg.getHeight()),
                    new Rect(0, 0,
                            (int) page_width_forscreen,
                            (int) page_height_forscreen), mDrawpaint);


        } else {
            Paper paper = new Paper(pagetype);
            page_width = paper.getWidth();
            page_height = paper.getHeight();


            float f[] = Util.getC_width(context, page_width, page_height);
            page_width_forscreen = f[0];
            page_height_forscreen = f[1];

            Paint p = new Paint();
            p.setColor(Color.WHITE);
            p.setStyle(Paint.Style.FILL);
            mcanvas.drawRect(
                    new Rect(0, 0,
                            (int) mcanvas.getWidth(),
                            (int) mcanvas.getHeight()), p);


        }
    }

    @Override
    protected void onDraw(Canvas canvas) {
        super.onDraw(canvas);
    }

}