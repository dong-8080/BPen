package com.example.bibipentest.view;


import android.content.Context;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.Canvas;
import android.graphics.Paint;
import android.util.AttributeSet;
import android.util.Log;
import android.view.View;

import androidx.annotation.Nullable;

import com.bbb.bpen.model.Paper;
import com.bbb.bpen.model.PointData;
import com.example.bibipentest.R;
import com.example.bibipentest.util.Util;
import com.bbb.bbbdraw.bbbdrawmanager;

import java.util.ArrayList;
import java.util.List;

public class DrawingView extends View {

    Paint mDrawpaint;
    PointData pointData;
    Canvas mCanvas;
    Bitmap bitmap;
    Bitmap background;
    Context context;

    float page_width;
    float page_height;

    public float page_width_forscreen;
    public float page_height_forscreen;

    private boolean isDrawing=false;
    private List<PointData> pointList = new ArrayList<>();


    public DrawingView(Context context) {
        super(context);
        this.context = context;
    }

    public DrawingView(Context context, @Nullable AttributeSet attrs) {
        super(context, attrs);
        this.context = context;
    }

    public DrawingView(Context context, @Nullable AttributeSet attrs, int defStyleAttr) {
        super(context, attrs, defStyleAttr);
        this.context = context;
    }

    public void initDraw() {
        //初始化画笔
        mDrawpaint = new Paint(Paint.DITHER_FLAG | Paint.ANTI_ALIAS_FLAG);
        mDrawpaint.setStyle(Paint.Style.STROKE);
        mDrawpaint.setStrokeWidth(5);
        mDrawpaint.setAntiAlias(true); // 抗锯齿
        mDrawpaint.setStrokeJoin(Paint.Join.ROUND);
        mDrawpaint.setStrokeCap(Paint.Cap.ROUND);

        mCanvas = new Canvas();

        // 铺图
//        bitmap = BitmapFactory.decodeResource(getResources(), R.drawable.page);
//
//        int screenWidth = getResources().getDisplayMetrics().widthPixels;
//        float scale = (float) screenWidth/ bitmap.getWidth();
//        matrix = new Matrix();
//        matrix.setScale(scale, scale);
        background = BitmapFactory.decodeResource(getResources(), R.drawable.page);
        // 缩放背景图片为屏幕宽度
        int screenWidth = getResources().getDisplayMetrics().widthPixels;
        int newWidth = screenWidth;
        int newHeight = (int) (background.getHeight() * ((float) newWidth / background.getWidth()));

        bitmap = Bitmap.createScaledBitmap(background, newWidth, newHeight, false);



        mCanvas = new Canvas(bitmap);
//        mCanvas.drawBitmap(bitmap, matrix, null);

//        bitmap = Bitmap.createBitmap(getWidth(), getHeight(), Bitmap.Config.ARGB_8888);
//        mCanvas = new Canvas(bitmap);


        // 获取纸类型 这里先固定使用A4
//        Paper paper = new Paper(pdata.getPaper_type());
        Paper paper = new Paper(0);
        page_width = paper.getWidth();
        page_height = paper.getHeight();


        float f[] = Util.getC_width(context, page_width, page_height);
        page_width_forscreen = f[0];
        page_height_forscreen = f[1];

        Log.e("PAGE", "bmp width and height"+page_width_forscreen+" "+page_height_forscreen);
    }

    public void addPoint(PointData pdata){
        pointList.add(pdata);
        isDrawing=true;
        onDrawingData();
    }

    public void onDrawingData(){
        Log.e("DrawingView", "point List: "+ pointList.size()+" ");
        while (pointList.size()>0){
            PointData pdata = pointList.get(0);
            if (pdata != null){
                Log.e("onDrawdrawData ",
                        "p_data x and y:"+ pdata.get_x() + pdata.get_y() + "," + "linewidth" +
                                pdata.getlinewidth() + " start:" + pdata.isStroke_start() +
                                " end：" + pdata.isStroke_end());
            }

            if (pdata==null || pdata.isStroke_end()){
                Log.d("onDraw ", "drawData 笔画结束 ");
                pointList.remove(0);
            }else{
                // 正常绘制，这里应该判断下纸是是否匹配的
                pointList.remove(0);
                bbbdrawmanager.DrawLine(mCanvas, pdata, mDrawpaint, page_width, page_height,
                        page_width_forscreen, page_height_forscreen,3+pdata.getlinewidth());

            }
            // 强制更新画布
            invalidate();
        }
    }

    @Override
    protected void onSizeChanged(int w, int h, int oldw, int oldh) {
        super.onSizeChanged(w, h, oldw, oldh);
        // View 大小改变时，重新创建Bitmap并关联Canvas
        initDraw();
    }

    @Override
    protected void onDraw(Canvas canvas) {
//         在View上绘制Bitmap
//        bitmap = BitmapFactory.decodeResource(getResources(), R.drawable.page);
//        bitmap = Bitmap.createBitmap(getWidth(), getHeight(), Bitmap.Config.ARGB_8888);
//        canvas.drawBitmap(bitmap,matrix ,null);
        super.onDraw(canvas);

        canvas.drawBitmap(bitmap, 0,0 ,null);

    }
}
