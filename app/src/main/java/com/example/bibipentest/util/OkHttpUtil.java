package com.example.bibipentest.util;

import androidx.annotation.NonNull;

import java.io.IOException;
import java.util.concurrent.TimeUnit;

import okhttp3.Call;
import okhttp3.Callback;
import okhttp3.FormBody;
import okhttp3.Headers;
import okhttp3.MediaType;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;
import okhttp3.ResponseBody;

//OkHttp
public class OkHttpUtil {
    private final OkHttpClient client = new OkHttpClient.Builder()
            .connectTimeout(10, TimeUnit.SECONDS)
            .writeTimeout(10, TimeUnit.SECONDS)
            .readTimeout(30, TimeUnit.SECONDS)
            .build();

    // 同步 GET 请求
    public Result<String> synchronousGet(String url)  {
        Request request = new Request.Builder()
                .url(url)
                .build();
        try (Response response = client.newCall(request).execute()) {
            if (response.isSuccessful()) {
                return ResultUtil.success( response.body().string());
            } else {
                return ResultUtil.defineFail(response.code(), response.message());
            }
        } catch (Exception e) {
            e.printStackTrace();
            return ResultUtil.fail(e.getMessage());
        }
    }

    // 异步 GET 请求
    // TODO: 2023/7/24 未测试
    public void asynchronousGet(String url) {

        Request request = new Request.Builder()
                .url(url)
                .build();

        // 使用 enqueue 发送异步请求，调用线程不会阻塞
        client.newCall(request).enqueue(new Callback() {
            @Override
            public void onFailure(@NonNull Call call, @NonNull IOException e) {
                e.printStackTrace();
            }

            @Override
            public void onResponse(@NonNull Call call, @NonNull Response response) {
                System.out.println("Current thread: " + Thread.currentThread().getName());

                try (ResponseBody responseBody = response.body()) {
                    if (!response.isSuccessful()) {
                        throw new IOException("Unexpected code " + response);
                    }

                    Headers responseHeaders = response.headers();
                    for (int i = 0; i < responseHeaders.size(); i++) {
                        System.out.println(responseHeaders.name(i) + ": " + responseHeaders.value(i));
                    }

                    System.out.println(responseBody.string());
                }catch (Exception e) {
                    e.printStackTrace();
                }
            }
        });

    }

    // 同步 POST 请求
    // TODO: 2023/7/24 未测试
    public Result<String>  synchronousPost(String url, String json) {
        MediaType JSON_MEDIA_TYPE = MediaType.parse("application/json; charset=utf-8");

        RequestBody requestBody = RequestBody.create(JSON_MEDIA_TYPE, json);


        Request request = new Request.Builder()
                .url(url)
                .post(requestBody)
                .build();

        try (Response response = client.newCall(request).execute()) {
            if (response.isSuccessful()) {
                return ResultUtil.success(response.body().string());
            } else {
                return ResultUtil.defineFail(response.code(), response.message());
            }
        }catch (Exception e) {
            e.printStackTrace();
            return ResultUtil.fail(e.getMessage());
        }
    }
}
