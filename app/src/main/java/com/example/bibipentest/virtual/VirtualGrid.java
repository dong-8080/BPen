package com.example.bibipentest.virtual;

import android.util.Log;

import com.bbb.bpen.model.PointData;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

// 对应方字格
public class VirtualGrid {
    private int center_x;
    private int center_y;
    // 待定
    // private int tolerance;
    private int width;
    private List<PointData> relatedPoints;
    private int tolerance;

    private float scalingFactor;

    public VirtualGrid(int center_x, int center_y, int width, float scalingFactor, int tolerance) {
        this.center_x = center_x;
        this.center_y = center_y;
        this.width = width;
        this.scalingFactor = scalingFactor;
        this.tolerance = tolerance;
        this.relatedPoints = new ArrayList<>();
    }

    // 判断是否绑定笔迹，若未绑定则无需提交
    public boolean isBindStrokes() {
        if (relatedPoints == null || relatedPoints.size() == 0) {
            return false;
        } else {
            return true;
        }
    }


    // getter and setter


    // 绑定田字格中所有的笔迹
    // 实现为对于传入的所有points, 判定其距离小于宽度加误差度，则在方格内，从源列表中将该数据删除，添加到绑定数据中
    public void bindStrokes(List<PointData> pointDataList) {
        // caused ConcurrentModificationException
//        for (PointData pdata: pointDataList) {
//            int distance = calculateChebyshevDistance(pdata);
//            if (distance<(this.width/2 + this.tolerance)){
//                this.relatedPoints.add(pdata);
//                pointDataList.remove(pdata);
//            }
//        }
        float maxD = this.width / 2 + this.tolerance;
        Log.e(TAG, "max distance:" + maxD);
        Iterator<PointData> iterator = pointDataList.iterator();
        while (iterator.hasNext()) {
            PointData pointData = iterator.next();
            int distance = calculateChebyshevDistance(pointData);
            Log.e(TAG, "max distance:" + maxD + " cur distance:" + distance);
            if (distance < (this.width / 2 + this.tolerance)) {
                this.relatedPoints.add(pointData);
                iterator.remove(); // 使用迭代器的 remove 方法安全地删除元素
            }
        }


    }

    public List<PointData> getRelatedPoints(){
        return this.relatedPoints;
    }

    private static String TAG = "EventTriggerReceiver";

    public void bindStrokes() {

    }

    // 先将PointData的坐标转化为dp单位，再计算棋盘距离
    // pdata中的x、y单位是mm，需要转换成对应屏幕的dp尺寸，使用scalingFactor进行缩放
    private int calculateChebyshevDistance(PointData pointData) {
        int pdata_x = (int) (pointData.get_x() * this.scalingFactor);
        int pdata_y = (int) (pointData.get_y() * this.scalingFactor);

        int deltaX = Math.abs(pdata_x - this.center_x);
        int deltaY = Math.abs(pdata_y - this.center_y);
        Log.e(TAG, "pdata:"+ pdata_x+" "+ pdata_y+"center_x"+this.center_x+" "+this.center_y);
        return Math.max(deltaX, deltaY);
    }
}
