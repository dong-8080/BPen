package com.example.bibipentest.virtual;

import android.os.Handler;
import android.util.Log;
import android.view.View;
import android.widget.Toast;

import com.bbb.bpen.model.PointData;
import com.example.bibipentest.MyApp;
import com.example.bibipentest.data.PointManager;
import com.example.bibipentest.json.PointSubmit;
import com.example.bibipentest.json.ResponseObject;
import com.example.bibipentest.json.StrokeSubmit;
import com.example.bibipentest.util.HttpUtil;
import com.example.bibipentest.view.DrawingView;
import com.google.gson.Gson;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import okhttp3.MediaType;
import okhttp3.RequestBody;

public class VirtualButtonSubmit extends VirtualButton {

    public static float scalingFactor = 11.810055f;
    // 对应的方格
    public VirtualGrid virtualGrid;

    private Handler uiHandler = new Handler();

    public VirtualButtonSubmit(VirtualPoint centerPoint){
        super(centerPoint.getId(), centerPoint.getX(), centerPoint.getY());
    }

    public void bindVritualGrid(VirtualGrid vritualGrid) {
        this.virtualGrid = vritualGrid;
    }

    // 获取田字格绑定的笔迹，深拷贝一下
    public List<PointData> getBindingStrokes(){
        List<PointData> strokes = new ArrayList<>();
        Log.e(TAG, this.virtualGrid.getRelatedPoints().size()+ "   reDrawPointList");
        for (PointData pointData: this.virtualGrid.getRelatedPoints()) {
            strokes.add(
                    new PointData(pointData.getPaper_type(), pointData.getPage_id(), pointData.get_x(),
                            pointData.get_y(), pointData.getlinewidth(), pointData.isStroke_start(),
                            pointData.getTime_stamp(), pointData.isStroke_end(),  pointData.isIsvirtual())
            );
        }
        return strokes;
    }

    // grid对象要绑定笔迹，即从未提交的笔迹中得到相关的所有笔迹
    @Override
    public void triggerClick() {
        // 模拟提交时
        List<PointData> pointScreenList = PointManager.getInstance().getPointScreenList();
        this.virtualGrid.bindStrokes(pointScreenList);


        Log.e("ClickButtonSubmit", "triggerClick");
        // 应该向后端提交数据点
        List <PointData> bindingStrokes = this.getBindingStrokes();
        submit(bindingStrokes);

    }

    // 标注提交的笔迹，可以变成灰色
    @Override
    public void testMethod(View view) {
        DrawingView dw = (DrawingView) view;
        List <PointData> reDrawPointList = this.getBindingStrokes();
        dw.notifyReDraw(reDrawPointList);
        dw.notifyTextChanged("点击提交按钮"+id+"!");
    }

    private static String TAG = "EventTriggerReceiver";

    public void submit(List<PointData> pointList){
        // 先进行坐标缩放，并且只拥有绘图所需属性
        List<PointSubmit> newPointList = new ArrayList<>();
        for (PointData pointData: pointList){
            newPointList.add(new PointSubmit(pointData));
        }
        // 存储题号和dp单位的笔迹信息
        StrokeSubmit strokes = new StrokeSubmit(id,MyApp.getInstance().getPhone(), MyApp.getInstance().getPaperid(), newPointList);
        Gson gson = new Gson();
        String strokesString = gson.toJson(strokes);

        String url = "http://10.110.147.81:8088/penUser/updateonechar";

        HttpUtil httpUtil = HttpUtil.getInstance();

        RequestBody requestBody = RequestBody.create(
                MediaType.parse("application/json"),
                strokesString
        );
        httpUtil.postRequest(url, requestBody, new HttpUtil.OkHttpCallback() {
            @Override
            public void onResponse(String response) {
                Log.e("HTTPTEST", "onResponse");
                Log.e("HTTPTEST", response);
                // TODO:调成功与失败，都要有语音提示
                Gson gson = new Gson();
                ResponseObject responseObject = gson.fromJson(response, ResponseObject.class);

                // 状态码这里有点问题待优化，粗略显示集合
                String toastMessage = responseObject.getMsg();

                uiHandler.post(new Runnable() {
                    @Override
                    public void run() {
                        Toast.makeText(MyApp.getInstance(), toastMessage, Toast.LENGTH_SHORT).show();
                    }
                });
            }

            @Override
            public void onFailure(IOException e) {
                Log.e("HTTPTEST", "onFailure");
                Log.e("HTTPTEST", e.toString());
            }
        });

    }


}



