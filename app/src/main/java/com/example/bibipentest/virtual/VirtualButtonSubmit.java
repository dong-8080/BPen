package com.example.bibipentest.virtual;

import static com.example.bibipentest.virtual.VirtualButtonSubmit.scalingFactor;

import android.util.Log;
import android.view.View;

import androidx.annotation.NonNull;

import com.bbb.bpen.model.PointData;
import com.example.bibipentest.data.PointManager;
import com.example.bibipentest.httpUtils.HttpUtils;
import com.example.bibipentest.json.PointSubmit;
import com.example.bibipentest.json.StrokeSubmit;
import com.example.bibipentest.view.DrawingView;
import com.google.gson.Gson;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.LongSummaryStatistics;

import okhttp3.Call;
import okhttp3.Callback;
import okhttp3.Response;

public class VirtualButtonSubmit extends VirtualButton {

    public static float scalingFactor = 11.810055f;
    // 对应的方格
    public VirtualGrid virtualGrid;

    public VirtualButtonSubmit(VirtualPoint centerPoint){
        super(centerPoint.getId(), centerPoint.getX(), centerPoint.getY());

    }
    // 中心坐标x y
//    public VirtualButtonSubmit(int center_x, int center_y) {
//        super(center_x, center_y);
//        this.virtualGrid = null;
//    }
//
//    public VirtualButtonSubmit(int center_x, int center_y, VirtualGrid vritualGrid) {
//        super(center_x, center_y);
//        this.virtualGrid = vritualGrid;
//    }

    public VirtualGrid getVirtualGrid() {
        return virtualGrid;
    }

    public void bindVritualGrid(VirtualGrid vritualGrid) {
        this.virtualGrid = vritualGrid;
    }

    // 获取田字格绑定的笔迹，深拷贝一下
    public List<PointData> getBindingStrokes(){
        List<PointData> strokes = new ArrayList<>();
        Log.e(TAG, this.virtualGrid.getRelatedPoints().size()+ "   reDrawPointList");
        for (PointData pointData: this.virtualGrid.getRelatedPoints()) {
            strokes.add(
                    new PointData(pointData.getPaper_type(), pointData.getPage_id(), pointData.get_x(),
                            pointData.get_y(), pointData.getlinewidth(), pointData.isStroke_start(),
                            pointData.getTime_stamp(), pointData.isStroke_end(),  pointData.isIsvirtual())
            );
        }
        return strokes;
    }

    // grid对象要绑定笔迹，即从未提交的笔迹中得到相关的所有笔迹
    @Override
    public void triggerClick() {
        // 模拟提交时，可以通知dw画其他颜色的画
        List<PointData> pointScreenList = PointManager.getInstance().getPointScreenList();
        this.virtualGrid.bindStrokes(pointScreenList);
        Log.e(TAG, this.virtualGrid.getRelatedPoints().size()+"  reDrawPointList");

        // 应该向后端提交数据点
        List <PointData> bindingStrokes = this.getBindingStrokes();


    }

    // 标注提交的笔迹
    @Override
    public void testMethod(View view) {
        DrawingView dw = (DrawingView) view;
        List <PointData> reDrawPointList = this.getBindingStrokes();
        submit(reDrawPointList);
        dw.notifyReDraw(reDrawPointList);
        dw.notifyTextChanged("点击提交按钮"+id+"!");

    }

    private static String TAG = "EventTriggerReceiver";

    public void submit(List<PointData> pointList){
        // 先进行坐标缩放，并且只拥有绘图所需属性
        List<PointSubmit> newPointList = new ArrayList<>();
        for (PointData pointData: pointList){
            newPointList.add(new PointSubmit(pointData));
        }
        // 存储题号和dp单位的笔迹信息
        // TODO：后端原话，此接口现在paperid仅限等于7，phone拿15840023205做测试
        StrokeSubmit strokes = new StrokeSubmit(id,"15840023205", "7", newPointList);
        Gson gson = new Gson();
        String strokesString = gson.toJson(strokes);

        String url = "http://10.110.147.81:8088/penUser/getcheckonechar";
        HttpUtils.post(url, strokesString, new Callback() {
            @Override
            public void onFailure(@NonNull Call call, @NonNull IOException e) {
                // 失败逻辑
                Log.e("network", "post failed");
                Log.e("network", String.valueOf(e));
            }

            @Override
            public void onResponse(@NonNull Call call, @NonNull Response response) throws IOException {
                if(response.isSuccessful()){
                    String responseData = response.body().string();
                    Log.e("network", "post success:"+responseData);
                }
            }
        });
    }


}



