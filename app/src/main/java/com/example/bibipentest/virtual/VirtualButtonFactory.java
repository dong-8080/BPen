package com.example.bibipentest.virtual;

import android.util.Log;

import java.util.ArrayList;
import java.util.List;
import java.util.LongSummaryStatistics;

// 实现依据条件构造VirtualButton类
public class VirtualButtonFactory {
    private static List<VirtualPoint> pagePointList;
    private static VirtualPoint relatedPoint;
    // 允许偏离按钮中心的距离 设置更高也可以，并不会出现交集情况
    private static final int buttonToleranceDegree = 10;
    private static final int gridToleranceDegree = 30;
    private static String TAG = "EventTriggerReceiver";

    // 可以单例存储这个 指的是底图2114x2999到185-6的缩放
    private static float scalingFactor = 11.810055f;

    // TODO：阈值判定修改一下
    // 构造按钮类，大致流程
    // 1. 获取整张纸对应的所有中心点
    // 2. 切克比夫距离找到最近的按钮点，判断相应的距离是否在容忍度内，否则不创建按钮对象
    // 3. 根据按钮类型字段，创建相应的按钮类型
    // 4. 对于提交按钮，要同时创建对应的方格对象，字迹判定另说
    public static VirtualButton createVirtualButton(float x_center, float y_center) {
        // (x, y)对应触发事件的中心坐标，单位是mm需要转化成dp，基于底图的缩放因子
        // 这里假定已经过初判，传入的点是一系列笔画的中心点或者其他
        pagePointList = getFakerList();

        int x = (int) (x_center * scalingFactor);
        int y = (int) (y_center * scalingFactor);
        relatedPoint = getRelatedPoint(x, y);
//        Log.e(TAG, "center x:" + x + " center y:" + y);
//        Log.e(TAG, "center x:" + x_center + " center y:" + y_center+" mm");
//        Log.e(TAG, "center x:" + x + " center y:" + y + " dp");
//        Log.e(TAG, "related point x:"+relatedPoint.getX()+"y:"+relatedPoint.getY());

        int relatedDistance = calculateChebyshevDistance(x, y, relatedPoint.getX(), relatedPoint.getY());
        int maxDistanceThreshold = relatedPoint.getWidth() / 2 + buttonToleranceDegree;

        // 判定距离太大，或者离方格更近，则不是一个按钮点击事件, 不构造类退出了
        if (relatedDistance > maxDistanceThreshold || relatedPoint.getType() != "button") {
            return null;
        }

        // 开始创建子类 Java可以用switch的
        switch (relatedPoint.getEvent()) {
            case "submit":
                VirtualButton virtualButtonSubmit = createVirtualButtonSubmit(relatedPoint);
                return virtualButtonSubmit;

            case "response":
                // 其他的按钮事件类型
                VirtualButton virtualButtonResponse = createVirtualButtonResponse(relatedPoint);
                return virtualButtonResponse;
            case "audioStart":
                VirtualButton virtualButtonAudioStart = new VirtualButtonAudioStart(relatedPoint);
                return virtualButtonAudioStart;
            case "audioPause":
                VirtualButton virtualButtonAudioPause = new VirtualButtonAudioPause(relatedPoint);
                return virtualButtonAudioPause;
            case "audioEnd":
                VirtualButton virtualButtonAudioEnd = new VirtualButtonAudioEnd(relatedPoint);
                return virtualButtonAudioEnd;
            default:
                return null;
        }
    }

    // 伪造纸张中心点的数据，实际上应该从服务器获取
    // 首次需要向后端申请，之后就不用了
    public static List<VirtualPoint> getFakerList() {
        List<VirtualPoint> pointList = new ArrayList<>();
        pointList.add(new VirtualPoint("button", "0-1", "audioStart", 720, 50, 80)); // 顶部按钮0-1
        pointList.add(new VirtualPoint("button", "0-2", "audioPause", 1010, 50, 80)); // 顶部按钮0-2
        pointList.add(new VirtualPoint("button", "0-3", "audioEnd", 1240, 50, 80)); // 顶部按钮0-3

        pointList.add(new VirtualPoint("button", "1-1", "submit", 400, 340, 80)); // 提交按钮1-1
        pointList.add(new VirtualPoint("button", "1-1", "response", 400, 420, 80)); // 播放按钮1-1
        pointList.add(new VirtualPoint("grid", "1-1", "", 240, 380, 180)); // 方格1-1

        pointList.add(new VirtualPoint("button", "1-2", "submit", 750, 340, 80)); // 提交按钮1-2
        pointList.add(new VirtualPoint("button", "1-2", "response", 750, 420, 80)); // 播放按钮1-2
        pointList.add(new VirtualPoint("grid", "1-2", "", 590, 380, 180)); // 方格1-2

        pointList.add(new VirtualPoint("button", "1-3", "submit", 1105, 340, 80));
        pointList.add(new VirtualPoint("button", "1-3", "response", 1105, 420, 80));
        pointList.add(new VirtualPoint("grid", "1-3", "", 940, 380, 180));

        pointList.add(new VirtualPoint("button", "1-4", "submit", 1460, 340, 80));
        pointList.add(new VirtualPoint("button", "1-4", "response", 1460, 420, 80));
        pointList.add(new VirtualPoint("grid", "1-4", "", 1290, 380, 180));

        pointList.add(new VirtualPoint("button", "1-5", "submit", 1800, 340, 80));
        pointList.add(new VirtualPoint("button", "1-5", "response", 1800, 420, 80));
        pointList.add(new VirtualPoint("grid", "1-5", "", 1640, 380, 180));

        return pointList;
    }

    // 计算Chebyshev距离
    public static int calculateChebyshevDistance(int x1, int y1, int x2, int y2) {
        int deltaX = Math.abs(x2 - x1);
        int deltaY = Math.abs(y2 - y1);
        return Math.max(deltaX, deltaY);
    }

    // 得到距离最近的纸上坐标点
    public static VirtualPoint getRelatedPoint(int x, int y) {
        if (pagePointList == null || pagePointList.isEmpty()) {
            return null;
        }

        VirtualPoint nearestPoint = pagePointList.get(0);
        double minDistance = calculateChebyshevDistance(x, y, nearestPoint.getX(), nearestPoint.getY());

        for (VirtualPoint point : pagePointList) {
            double distance = calculateChebyshevDistance(x, y, point.getX(), point.getY());
            Log.e("EventTriggerReceiver", "distance:"+ distance);
            if (distance < minDistance) {
                minDistance = distance;
                nearestPoint = point;
            }
        }

        return nearestPoint;
    }

    // 创建虚拟提交按钮，这里要同时创建着对应的方格按钮
    private static VirtualButtonSubmit createVirtualButtonSubmit(VirtualPoint relatedPoint) {
//        int x = relatedPoint.getX();
//        int y = relatedPoint.getY();

        VirtualButtonSubmit virtualButtonSubmit = new VirtualButtonSubmit(relatedPoint);
        VirtualPoint relatedGridPoint = null;

        // 遍历pointList找到id相同的方格
        for (VirtualPoint point : pagePointList) {
            if (point.getId() == relatedPoint.getId() && point.getType() == "grid") {
                relatedGridPoint = point;
                break;
            }
        }

        int grid_x = relatedGridPoint.getX();
        int grid_y = relatedGridPoint.getY();
        int grid_width = relatedGridPoint.getWidth();
        VirtualGrid virtualGrid = new VirtualGrid(grid_x, grid_y, grid_width, scalingFactor, gridToleranceDegree);
        virtualButtonSubmit.bindVritualGrid(virtualGrid);

        return virtualButtonSubmit;
    }

    // 创建虚拟回应按钮，测试只打印Log即可；
    // 业务情况需要播放音频和网络通信
    private static VirtualButton createVirtualButtonResponse(VirtualPoint relatedPoint) {
        VirtualButtonResponse button = new VirtualButtonResponse(relatedPoint);
        return button;
    }

}
