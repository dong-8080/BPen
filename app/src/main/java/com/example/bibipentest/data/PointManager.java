package com.example.bibipentest.data;

import com.bbb.bpen.model.PointData;

import java.util.ArrayList;
import java.util.List;

// 单例模式，存储蓝牙笔生成的point对象
// 所有对点的操作都基于此进行
public class PointManager {
    // 实例对象，以及绘制点和屏幕未提交的点
    private static PointManager instance;
    private List<PointData> pointDrawList;
    private List<PointData> pointScreenList;

    private PointManager() {
        this.pointDrawList = new ArrayList<>();
        this.pointScreenList = new ArrayList<>();
    }

    public static synchronized PointManager getInstance() {
        if (instance == null) {
            instance = new PointManager();
        }
        return instance;
    }

    public List<PointData> getPointDrawList() {
        return pointDrawList;
    }

    public List<PointData> getPointScreenList() {
        return pointScreenList;
    }

    public void addPointToList(List<PointData> pointDataList) {
        pointDrawList.addAll(pointDataList);
        pointScreenList.addAll(pointDataList);
    }

    // 是否包含绘图的数据点
    public boolean isContainDrawPoint() {
        return pointDrawList.size() > 0;
    }

    // 笔迹书写是否结束
    public boolean isStrokeFinish() {
        return pointScreenList.get(-1).isStroke_end();
    }

    // 返回最后一段轨迹
    public List<PointData> getLatestStroke() {
        int startIndex = 0;
        int endIndex = 0;
        for (int i = pointScreenList.size()-1; i >= 0; i--) {
            if (pointScreenList.get(i).isStroke_end()) {
                endIndex = i;
                break;
            }
        }
        for (int j = endIndex; j >= 0; j--) {
            if (pointScreenList.get(j).isStroke_start()) {
                startIndex = j;
                break;
            }
        }
        // 新创建List，不然会修改原先的对象
        List<PointData> lastStroke = new ArrayList<>(
                pointScreenList.subList(startIndex, endIndex + 1)
        );
        return lastStroke;
    }

}
